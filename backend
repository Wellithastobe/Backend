local player = game.Players.LocalPlayer

local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

local Window = OrionLib:MakeWindow({Name = "Artex.Win", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})

--[[
Name = <string> - The name of the UI.
HidePremium = <bool> - Whether or not the user details shows Premium status or not.
SaveConfig = <bool> - Toggles the config saving in the UI.
ConfigFolder = <string> - The name of the folder where the configs are saved.
IntroEnabled = <bool> - Whether or not to show the intro animation.
IntroText = <string> - Text to show in the intro animation.
IntroIcon = <string> - URL to the image you want to use in the intro animation.
Icon = <string> - URL to the image you want displayed on the window.
CloseCallback = <function> - Function to execute when the window is closed.
]]

local Tab = Window:MakeTab({
Name = "ðŸ’­More",
Icon = "rbxassetid://4483345998",
PremiumOnly = false
})

--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]

Tab:AddTextbox({
	Name = "Imformation",
	Default = "If you type in here, It will be printed onto the console!",
	TextDisappear = true,
	Callback = function(Value)
		print(Value)
	end	  
})

--[[
Name = <string> - The name of the textbox.
Default = <string> - The default value of the textbox.
TextDisappear = <bool> - Makes the text disappear in the textbox after losing focus.
Callback = <function> - The function of the textbox.
]]

Tab:AddButton({
	Name = "DarkDex",
	Callback = function()
    loadstring(game:HttpGet("https://cdn.wearedevs.net/scripts/Dex%20Explorer.txt"))()
      		print("DarkDex unloads when you reset!")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]

local Tab = Window:MakeTab({
Name = "ðŸ“ˆModifiers",
Icon = "rbxassetid://4483345998",
PremiumOnly = false
})

--[[
Name = <string> - The name of the tab.
Icon = <string> - The icon of the tab.
PremiumOnly = <bool> - Makes the tab accessible to Sirus Premium users only.
]]

local Section = Tab:AddSection({
Name = "Player Modifiers"
})

--[[
Name = <string> - The name of the section.
]]

OrionLib:MakeNotification({
Name = "Welcome To Artex.Win!",
Content = "My Very sigma script",
Image = "rbxassetid://4483345998",
Time = 5
})

--[[
Title = <string> - The title of the notification.
Content = <string> - The content of the notification.
Image = <string> - The icon of the notification.
Time = <number> - The duration of the notfication.
]]

Tab:AddSlider({
	Name = "WalkSpeed",
	Min = 0,
	Max = 200,
	Default = 5,
	Color = Color3.fromRGB(255,255,255),
	Increment = 2,
	ValueName = "WalkSpeed",
	Callback = function(value)
    player.Character.Humanoid.WalkSpeed = (value)
		print(value)
	end    
})

--[[
Name = <string> - The name of the slider.
Min = <number> - The minimal value of the slider.
Max = <number> - The maxium value of the slider.
Increment = <number> - How much the slider will change value when dragging.
Default = <number> - The default value of the slider.
ValueName = <string> - The text after the value number.
Callback = <function> - The function of the slider.
]]

Tab:AddSlider({
	Name = "JumpPower",
	Min = 0,
	Max = 200,
	Default = 5,
	Color = Color3.fromRGB(255,255,255),
	Increment = 2,
	ValueName = "JumpPower",
	Callback = function(value)
    player.Character.Humanoid.JumpPower = (value)
		print(value)
	end    
})

local Section = Tab:AddSection({
	Name = "Infinite"
})

--[[
Name = <string> - The name of the section.
]]

Tab:AddButton({
	Name = "Infinite Jump",
	Callback = function()
    local notification = Instance.new("Hint")
notification.Text = "Script by Deadlyquest666"
notification.Parent = game.StarterGui

local player = game.Players.LocalPlayer

local infiniteJumpPower = 100
local defaultJumpPower = 50

local gui = Instance.new("ScreenGui")
gui.Name = "InfiniteJumpGUI"
gui.Parent = player.PlayerGui

local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 200, 0, 50)
mainFrame.Position = UDim2.new(1, -220, 1, -60) -- Position at the bottom-right corner
mainFrame.BackgroundTransparency = 0.3
mainFrame.BackgroundColor3 = Color3.new(0.2, 0.8, 0.8) -- Teal background color
mainFrame.BorderSizePixel = 0
mainFrame.Parent = gui


local turnOnButton = Instance.new("TextButton")
turnOnButton.Name = "TurnOnButton"
turnOnButton.Text = "Infinite Jump"
turnOnButton.Size = UDim2.new(0, 200, 0, 50)
turnOnButton.Position = UDim2.new(0, 0, 0, 0)
turnOnButton.BackgroundTransparency = 0.3
turnOnButton.BackgroundColor3 = Color3.new(0.4, 0.9, 0.4) -- Light green background color
turnOnButton.Parent = mainFrame

local minimizeButton = Instance.new("TextButton")
minimizeButton.Name = "MinimizeButton"
minimizeButton.Text = "_"
minimizeButton.Size = UDim2.new(0, 30, 0, 30)
minimizeButton.Position = UDim2.new(1, -35, 0, 5) -- Position at the top-right corner
minimizeButton.BackgroundTransparency = 0.3
minimizeButton.BackgroundColor3 = Color3.new(0.8, 0.2, 0.2) -- Red background color
minimizeButton.TextColor3 = Color3.new(1, 1, 1)
minimizeButton.Parent = mainFrame

local function handleJump()
    
    if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
        local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
        

        humanoid.JumpPower = infiniteJumpPower
        
        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    end
end

local function turnOnInfiniteJump()
    handleJump()
    turnOnButton.Visible = true
end

local function minimizeGUI()
    mainFrame.Visible = false
    minimizeButton.Visible = false
end

turnOnButton.MouseButton1Click:Connect(turnOnInfiniteJump)
minimizeButton.MouseButton1Click:Connect(minimizeGUI)

local UserInputService = game:GetService("UserInputService")
UserInputService.InputBegan:Connect(function(input, isProcessed)
    if not isProcessed and input.KeyCode == Enum.KeyCode.Space then
        turnOnInfiniteJump()
    end
end)
 game:GetService("StarterGui"):SetCore("SendNotification", { 
        Title = "Script By";
        Text  = "Deadlyquest666";
        Icon  = "rbxthumb://type=Asset&id=5107182114&w=150&h=150"})
    Duration = 16;
      		print("Loaded Infinite Jump")
  	end    
})

local Section = Tab:AddSection({
	Name = "Expanders"
})

--[[
Name = <string> - The name of the slider.
Min = <number> - The minimal value of the slider.
Max = <number> - The maxium value of the slider.
Increment = <number> - How much the slider will change value when dragging.
Default = <number> - The default value of the slider.
ValueName = <string> - The text after the value number.
Callback = <function> - The function of the slider.
]]


--[[
Name = <string> - The name of the colorpicker.
Default = <color3> - The default value of the colorpicker.
Callback = <function> - The function of the colorpicker.
]]

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]



--[[
Name = <string> - The name of the slider.
Min = <number> - The minimal value of the slider.
Max = <number> - The maxium value of the slider.
Increment = <number> - How much the slider will change value when dragging.
Default = <number> - The default value of the slider.
ValueName = <string> - The text after the value number.
Callback = <function> - The function of the slider.
]]



local Tab = Window:MakeTab({
Name = "ðŸŒŒTower Of Hell",
Icon = "rbxassetid://4483345998",
PremiumOnly = false
})

local Section = Tab:AddSection({
Name = "Tools/Btools"
})

Tab:AddButton({
	Name = "Tools",
	Callback = function()
    local GearFolder = game.ReplicatedStorage.Gear
local player = game.Players.LocalPlayer

for _, tool in ipairs(GearFolder:GetChildren()) do
    if tool:IsA("Tool") then
        local clonedTool = tool:Clone()
        clonedTool.Parent = player.Backpack
    end
end
      		print("Tools Loaded")
  	end    
})

--[[
Name = <string> - The name of the button.
Callback = <function> - The function of the button.
]]



local Section = Tab:AddSection({
Name = "Teleports"
})
